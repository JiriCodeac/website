name: Build
on:
  push:
    branches:
      - "*"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Image
        run: docker-compose up -t

      - name: Clean
        run: docker run --rm --volume `pwd`:/www make -C production/ clean

      - name: Build
        run: docker run --rm --volume `pwd`:/www make -C production/ package
      
      # - name: Install Ruby
      #   uses: actions/setup-ruby@v1
      #   with:
      #     ruby-version: '2.7'

      # - name: Clone
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0

      # - name: Cache node modules
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - name: Build
      #   run: make -C production/ package

      - name: Store Artifact
        uses: actions/upload-artifact@v1
        with:
          name: ticha-website # double zipping issue: https://github.com/actions/upload-artifact/issues/39
          path: production/release/ticha-website.zip

      - name: Release
        run: make -C production/ release AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_EC2_METADATA_DISABLED: "true" # https://github.com/actions/runner/issues/503

      # curl -XPOST -u "${{ secrets.PAT_USERNAME}}:${{secrets.PAT_TOKEN}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/YOURNAME/APPLICATION_NAME/actions/workflows/build.yaml/dispatches --data '{"ref": "master"}'

